// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SnippetsShared.proto

package SnippetsShared

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message
type SnippetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sleep                int32    `protobuf:"varint,2,opt,name=sleep,proto3" json:"sleep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnippetRequest) Reset()         { *m = SnippetRequest{} }
func (m *SnippetRequest) String() string { return proto.CompactTextString(m) }
func (*SnippetRequest) ProtoMessage()    {}
func (*SnippetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_SnippetsShared_9825d99ae516c94c, []int{0}
}
func (m *SnippetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnippetRequest.Unmarshal(m, b)
}
func (m *SnippetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnippetRequest.Marshal(b, m, deterministic)
}
func (dst *SnippetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnippetRequest.Merge(dst, src)
}
func (m *SnippetRequest) XXX_Size() int {
	return xxx_messageInfo_SnippetRequest.Size(m)
}
func (m *SnippetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnippetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnippetRequest proto.InternalMessageInfo

func (m *SnippetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnippetRequest) GetSleep() int32 {
	if m != nil {
		return m.Sleep
	}
	return 0
}

// The response message.
type SnippetResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnippetResponse) Reset()         { *m = SnippetResponse{} }
func (m *SnippetResponse) String() string { return proto.CompactTextString(m) }
func (*SnippetResponse) ProtoMessage()    {}
func (*SnippetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_SnippetsShared_9825d99ae516c94c, []int{1}
}
func (m *SnippetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnippetResponse.Unmarshal(m, b)
}
func (m *SnippetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnippetResponse.Marshal(b, m, deterministic)
}
func (dst *SnippetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnippetResponse.Merge(dst, src)
}
func (m *SnippetResponse) XXX_Size() int {
	return xxx_messageInfo_SnippetResponse.Size(m)
}
func (m *SnippetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnippetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnippetResponse proto.InternalMessageInfo

func (m *SnippetResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SnippetRequest)(nil), "SnippetsShared.SnippetRequest")
	proto.RegisterType((*SnippetResponse)(nil), "SnippetsShared.SnippetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnippetsClient is the client API for Snippets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnippetsClient interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (Snippets_SayHelloClient, error)
}

type snippetsClient struct {
	cc *grpc.ClientConn
}

func NewSnippetsClient(cc *grpc.ClientConn) SnippetsClient {
	return &snippetsClient{cc}
}

func (c *snippetsClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (Snippets_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Snippets_serviceDesc.Streams[0], "/SnippetsShared.Snippets/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &snippetsSayHelloClient{stream}
	return x, nil
}

type Snippets_SayHelloClient interface {
	Send(*SnippetRequest) error
	Recv() (*SnippetResponse, error)
	grpc.ClientStream
}

type snippetsSayHelloClient struct {
	grpc.ClientStream
}

func (x *snippetsSayHelloClient) Send(m *SnippetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snippetsSayHelloClient) Recv() (*SnippetResponse, error) {
	m := new(SnippetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnippetsServer is the server API for Snippets service.
type SnippetsServer interface {
	SayHello(Snippets_SayHelloServer) error
}

func RegisterSnippetsServer(s *grpc.Server, srv SnippetsServer) {
	s.RegisterService(&_Snippets_serviceDesc, srv)
}

func _Snippets_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnippetsServer).SayHello(&snippetsSayHelloServer{stream})
}

type Snippets_SayHelloServer interface {
	Send(*SnippetResponse) error
	Recv() (*SnippetRequest, error)
	grpc.ServerStream
}

type snippetsSayHelloServer struct {
	grpc.ServerStream
}

func (x *snippetsSayHelloServer) Send(m *SnippetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snippetsSayHelloServer) Recv() (*SnippetRequest, error) {
	m := new(SnippetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Snippets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SnippetsShared.Snippets",
	HandlerType: (*SnippetsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _Snippets_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "SnippetsShared.proto",
}

func init() {
	proto.RegisterFile("SnippetsShared.proto", fileDescriptor_SnippetsShared_9825d99ae516c94c)
}

var fileDescriptor_SnippetsShared_9825d99ae516c94c = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x09, 0xce, 0xcb, 0x2c,
	0x28, 0x48, 0x2d, 0x29, 0x0e, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x43, 0x15, 0x55, 0xb2, 0xe2, 0x82, 0x89, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x42, 0x22, 0x5c, 0xac, 0xc5, 0x39, 0xa9, 0xa9, 0x05, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac,
	0x41, 0x10, 0x8e, 0x92, 0x36, 0x17, 0x3f, 0x5c, 0x6f, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90,
	0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x3a, 0x4c, 0x3f, 0x8c, 0x6b, 0x14, 0xcb, 0xc5,
	0x01, 0xb3, 0x5a, 0x28, 0x90, 0x8b, 0x23, 0x38, 0xb1, 0xd2, 0x23, 0x35, 0x27, 0x27, 0x5f, 0x48,
	0x4e, 0x0f, 0xcd, 0x9d, 0xa8, 0xce, 0x91, 0x92, 0xc7, 0x29, 0x0f, 0xb1, 0x52, 0x89, 0x41, 0x83,
	0xd1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x3d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0xdf,
	0x43, 0x0b, 0xf6, 0x00, 0x00, 0x00,
}
